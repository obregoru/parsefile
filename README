parsefile

-Rails 2.3.18
-Ruby 1.8.7

Reads a text file and outputs nicely formated json. 

The Rails and Ruby versions were just defaults when the project was created.  This solution should work fine in other versions.



Text file format:

$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
 

For each line in the input file, the program should output three pieces of information parsed from the line in the following JSON format (using the above example line):
 
        {
           “feature” : “TXT MESSAGING – 250”,
           “date_range” : “09/29 – 10/28”,
           “price” : 4.99 // use the last dollar amount in the line
        }


input file:

$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99
$4.99 TXT MESSAGING – 250 09/29 – 10/28 4.99


Results:

[
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  },
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  },
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  },
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  },
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  },
  {
    "feature": "TXT MESSAGING – 250",
    "date_range": "09/29 – 10/28",
    "price": "4.99"
  }
]
